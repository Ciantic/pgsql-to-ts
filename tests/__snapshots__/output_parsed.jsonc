{
  "enums": [
    {
      "name": "my_enum_example",
      "values": [
        "good",
        "bad",
        "ugly",
        "dont know",
      ],
    },
  ],
  "tables": [
    {
      "columns": [
        {
          "generatedWhen": "always",
          "name": "test_pk",
          "notnull": true,
          "primarykey": true,
          "type": "int4",
          "unique": true,
        },
      ],
      "name": "special_key",
    },
    {
      "columns": [
        {
          "name": "bigserial",
          "notnull": true,
          "primarykey": true,
          "type": "bigserial",
          "unique": true,
        },
        {
          "name": "serial",
          "type": "serial",
        },
        {
          "name": "test_integer",
          "type": "int4",
        },
        {
          "name": "test_bigint",
          "type": "int8",
        },
        {
          "name": "test_numeric",
          "type": "numeric",
        },
        {
          "name": "test_float4",
          "type": "float4",
        },
        {
          "name": "test_float8",
          "type": "float8",
        },
        {
          "name": "test_decimal",
          "type": "numeric",
          "typeParams": [
            10,
            2,
          ],
        },
        {
          "name": "test_uuid",
          "type": "uuid",
        },
        {
          "name": "test_text",
          "type": "text",
        },
        {
          "name": "test_varchar",
          "type": "varchar",
          "typeParams": [
            255,
          ],
        },
        {
          "name": "test_boolean",
          "type": "bool",
        },
        {
          "name": "test_timestamptz",
          "type": "timestamptz",
        },
        {
          "name": "test_timestamp",
          "type": "timestamp",
        },
        {
          "name": "test_date",
          "type": "date",
        },
        {
          "name": "test_time",
          "type": "time",
        },
        {
          "name": "test_jsonb",
          "type": "jsonb",
        },
        {
          "name": "test_json",
          "type": "json",
        },
        {
          "name": "test_enum",
          "type": "my_enum_example",
        },
        {
          "array": true,
          "name": "test_array_text",
          "type": "text",
        },
        {
          "array": true,
          "name": "text_array_integer",
          "type": "int4",
        },
        {
          "name": "test_bytea",
          "type": "bytea",
        },
        {
          "name": "test_xml",
          "type": "xml",
        },
        {
          "default": "'default value'",
          "defaultSimple": "default value",
          "name": "test_default",
          "type": "text",
        },
        {
          "default": "42",
          "defaultSimple": 42,
          "name": "test_default_int",
          "notnull": true,
          "type": "int4",
        },
        {
          "default": "CURRENT_TIMESTAMP",
          "name": "test_default_now",
          "notnull": true,
          "type": "timestamptz",
        },
        {
          "default": "0.00",
          "defaultSimple": "0.00",
          "name": "test_default_decimal",
          "notnull": true,
          "type": "numeric",
          "typeParams": [
            10,
            2,
          ],
        },
        {
          "default": "gen_random_uuid()",
          "name": "test_default_uuid",
          "notnull": true,
          "type": "uuid",
        },
        {
          "check": "test_check_is_gt0 > 0",
          "checkSimple": {
            "min": 0,
            "operator": ">",
          },
          "name": "test_check_is_gt0",
          "type": "int4",
        },
        {
          "check": "test_check_is_gte0 >= 0",
          "checkSimple": {
            "min": 0,
            "operator": ">=",
          },
          "name": "test_check_is_gte0",
          "type": "int4",
        },
        {
          "check": "test_check_is_lte100 <= 100",
          "checkSimple": {
            "max": 100,
            "operator": "<=",
          },
          "name": "test_check_is_lte100",
          "type": "int4",
        },
        {
          "check": "test_check_is_lt100 < 100",
          "checkSimple": {
            "max": 100,
            "operator": "<",
          },
          "name": "test_check_is_lt100",
          "type": "int4",
        },
        {
          "check": "test_check_equal42 = 42",
          "checkSimple": {
            "operator": "=",
            "value": 42,
          },
          "name": "test_check_equal42",
          "type": "int4",
        },
        {
          "check": "test_check_not_equal42 <> 42",
          "name": "test_check_not_equal42",
          "type": "int4",
        },
        {
          "check": "test_check_int_between BETWEEN 0 AND 100",
          "checkSimple": {
            "max": 100,
            "min": 0,
            "operator": "BETWEEN",
          },
          "name": "test_check_int_between",
          "type": "int4",
        },
        {
          "check": "test_check_decimal_gt0 > 0",
          "checkSimple": {
            "min": 0,
            "operator": ">",
          },
          "name": "test_check_decimal_gt0",
          "type": "numeric",
          "typeParams": [
            10,
            2,
          ],
        },
        {
          "check": "test_check_equal42 = 42",
          "name": "test_check_foo",
          "type": "int4",
        },
        {
          "name": "test_not_null",
          "notnull": true,
          "type": "text",
        },
        {
          "array": true,
          "name": "test_not_null_array",
          "notnull": true,
          "type": "text",
        },
      ],
      "name": "various_types",
    },
    {
      "columns": [
        {
          "name": "test_pk",
          "notnull": true,
          "primarykey": true,
          "type": "uuid",
          "unique": true,
        },
        {
          "foreignKey": {
            "column": "bigserial",
            "deleteAction": "a",
            "matchType": "s",
            "table": "various_types",
            "updateAction": "a",
          },
          "name": "test_fk_to_various_types",
          "type": "int8",
        },
        {
          "foreignKey": {
            "column": "test_pk",
            "deleteAction": "a",
            "matchType": "s",
            "table": "test_foreignkeys",
            "updateAction": "a",
          },
          "name": "test_fk_to_self",
          "type": "uuid",
        },
      ],
      "name": "test_foreignkeys",
    },
  ],
}